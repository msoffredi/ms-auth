# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: RBAC authorization serverless microservice

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
    - AWS::Serverless-2016-10-31

Parameters:
    SuperAdminEmail:
        Type: String
        Description: The email address of the default user to be added to the Cognito user pool by default
    AuthDomainName:
        Type: String
        Description: Prefix for the domain name Cognito uses for its UI (must be unique in the entire AWS)

Globals:
    Function:
        Layers:
            - !Ref RuntimeDependenciesLayer
        Environment:
            # # Environment variables used by every function
            # Variables:
            #  SAMPLE_TABLE: !Ref SampleTable
        Runtime: nodejs14.x
        MemorySize: 128
        Timeout: 100
    Api:
        Auth:
            Authorizers:
                MsAuthCognitoAuthorizer:
                    UserPoolArn: !GetAtt MsAuthCognitoUserPool.Arn
                    AuthType: COGNITO_USER_POOLS
            DefaultAuthorizer: MsAuthCognitoAuthorizer
        Cors:
            AllowMethods: "'GET,OPTIONS'"
            AllowHeaders: "'content-type'"
            AllowOrigin: "'*'"
            AllowCredentials: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
    # Each Lambda function is defined by properties:
    # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

    # This is a Lambda function config associated with the source code: in src/handlers/example.ts
    MsAuthAPIFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Handler: dist/handlers/auth.handler
            Description: RBAC auth serverless microservice
            Runtime: nodejs14.x
            Environment:
                Variables:
                    DYNAMODB_URI: ''
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBOperationsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBModulesTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBPermissionsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBRolesTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBUsersTable
            Events:
                Healthcheck:
                    Type: Api
                    Properties:
                        Path: /healthcheck
                        Auth:
                            Authorizer: NONE
                        Method: get
                # Operations endpoints
                OperationsV0Get:
                    Type: Api
                    Properties:
                        Path: /v0/operations
                        Method: get
                OperationsV0Post:
                    Type: Api
                    Properties:
                        Path: /v0/operations
                        Method: post
                OperationsV0Delete:
                    Type: Api
                    Properties:
                        Path: /v0/operations/{id}
                        Method: delete
                # Modules endpoints
                ModulesV0Get:
                    Type: Api
                    Properties:
                        Path: /v0/modules
                        Method: get
                ModulesV0Post:
                    Type: Api
                    Properties:
                        Path: /v0/modules
                        Method: post
                ModulesV0Delete:
                    Type: Api
                    Properties:
                        Path: /v0/modules/{id}
                        Method: delete
                # Permissions endpoints
                PermissionsV0Get:
                    Type: Api
                    Properties:
                        Path: /v0/permissions
                        Method: get
                PermissionsV0Post:
                    Type: Api
                    Properties:
                        Path: /v0/permissions
                        Method: post
                PermissionsV0Delete:
                    Type: Api
                    Properties:
                        Path: /v0/permissions/{id}
                        Method: delete
                PermissionsV0GetOne:
                    Type: Api
                    Properties:
                        Path: /v0/permissions/{id}
                        Method: get
                # Roles endpoints
                RolesV0Get:
                    Type: Api
                    Properties:
                        Path: /v0/roles
                        Method: get
                RolesV0Post:
                    Type: Api
                    Properties:
                        Path: /v0/roles
                        Method: post
                RolesV0Delete:
                    Type: Api
                    Properties:
                        Path: /v0/roles/{id}
                        Method: delete
                RolesV0GetOne:
                    Type: Api
                    Properties:
                        Path: /v0/roles/{id}
                        Method: get
                # Users endpoints
                UsersV0Get:
                    Type: Api
                    Properties:
                        Path: /v0/users
                        Method: get
                UsersV0Post:
                    Type: Api
                    Properties:
                        Path: /v0/users
                        Method: post
                UsersV0Delete:
                    Type: Api
                    Properties:
                        Path: /v0/users/{id}
                        Method: delete
                UsersV0GetOne:
                    Type: Api
                    Properties:
                        Path: /v0/users/{id}
                        Method: get

    # Shared layer with Lambda runtime dependencies
    RuntimeDependenciesLayer:
        Type: AWS::Serverless::LayerVersion
        Metadata:
            BuildMethod: makefile
        Properties:
            LayerName: 'ms-auth-dependencies'
            Description: Runtime dependencies for Lambdas
            ContentUri: ./
            CompatibleRuntimes:
                - nodejs14.x
            RetentionPolicy: Retain

    MsAuthCognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: MsAuth
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
            UsernameAttributes:
                - email
            Schema:
                - AttributeDataType: String
                  Name: email
                  Required: true

    MyCognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            UserPoolId: !Ref MsAuthCognitoUserPool
            ClientName: MsAuthClient
            GenerateSecret: false
            # You can edit this in the future to match your desired callback URL
            CallbackURLs:
                - https://soffredi.org
            AllowedOAuthFlowsUserPoolClient: true
            AllowedOAuthFlows:
                - code
                - implicit
            AllowedOAuthScopes:
                - email
                - openid
                - profile
                - aws.cognito.signin.user.admin
            SupportedIdentityProviders:
                - COGNITO
    AuthDomain:
        Type: AWS::Cognito::UserPoolDomain
        Properties:
            UserPoolId: !Ref MsAuthCognitoUserPool
            Domain: !Ref AuthDomainName

    TestUser:
        Type: AWS::Cognito::UserPoolUser
        Properties:
            UserPoolId: !Ref MsAuthCognitoUserPool
            Username: !Ref SuperAdminEmail
            UserAttributes:
                - Name: email
                  Value: !Ref SuperAdminEmail

    DynamoDBOperationsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            TableName: ms-auth-operations
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH

    DynamoDBModulesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            TableName: ms-auth-modules
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH

    DynamoDBPermissionsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            TableName: ms-auth-permissions
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH

    DynamoDBRolesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            TableName: ms-auth-roles
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH

    DynamoDBUsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            TableName: ms-auth-users
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH

Outputs:
    MsAuthAPIProd:
        Description: 'API Gateway endpoint URL for Prod environment'
        Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    MsAuthAPIStage:
        Description: 'API Gateway endpoint URL for Stage environment'
        Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage'
    MsAuthAPIFunction:
        Description: 'Auth API Lambda Function ARN'
        Value: !GetAtt MsAuthAPIFunction.Arn
    MsAuthAPIFunctionIamRole:
        Description: 'Implicit IAM Role created for Auth API function'
        Value: !GetAtt MsAuthAPIFunctionRole.Arn
